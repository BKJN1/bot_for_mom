import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from aiogram.types import FSInputFile

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -------------------------------
# –¢–æ–≤–∞—Ä—ã
# -------------------------------
products = {
    "–•–∞–ª–∞—Ç—ã": [
        {"name": "–¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –º–∞—Ö—Ä–æ–≤—ã–π —Ö–∞–ª–∞—Ç (48, –º–æ–ª–æ—á–Ω—ã–π)", "price": "10 000 ‚Ç∏", "photo": "images/zen-renkler-1-scaled.jpg"},
        {"name": "–¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –º–∞—Ö—Ä–æ–≤—ã–π —Ö–∞–ª–∞—Ç (48, –±–∏—Ä—é–∑–∞)", "price": "10 000 ‚Ç∏", "photo": "images/zen-renkler-1-scaled.jpg"},
        {"name": "–¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –º–∞—Ö—Ä–æ–≤—ã–π —Ö–∞–ª–∞—Ç (54, –º–æ–ª–æ—á–Ω—ã–π)", "price": "10 000 ‚Ç∏", "photo": "images/zen-renkler-1-scaled.jpg"},
    ],
    "–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ": {
        "name": "–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ –¥–ª—è —Ä—É–∫ (40x70, —Ü–≤–µ—Ç–∞ —Ä–∞–∑–Ω—ã–µ)",
        "price": "550 ‚Ç∏",
        "photo": "images/zen-renkler-1-scaled.jpg",
        "colors": ["–ë–µ–ª—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–†–æ–∑–æ–≤—ã–π"]
    },
    "–ù–æ—Å–∫–∏": {
        "name": "–ù–æ—Å–∫–∏ –¥–µ—Ç—Å–∫–∏–µ (2‚Äì4 –≥–æ–¥–∞)",
        "price": "220 ‚Ç∏",
        "photo": "images/zen-renkler-1-scaled.jpg",
        "colors": ["–°–∏–Ω–∏–µ", "–ë–µ–ª—ã–µ", "–ö—Ä–∞—Å–Ω—ã–µ"]
    }
}

# -------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -------------------------------
def main_menu():
    kb = [
        [KeyboardButton(text="üõç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã")],
        [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def products_menu():
    kb = [
        [KeyboardButton(text="–•–∞–ª–∞—Ç—ã")],
        [KeyboardButton(text="–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ –¥–ª—è —Ä—É–∫")],
        [KeyboardButton(text="–ù–æ—Å–∫–∏ –¥–µ—Ç—Å–∫–∏–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def back_menu():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)

def menu_button():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üè† –í –º–µ–Ω—é")]], resize_keyboard=True)

# -------------------------------
# /start
# -------------------------------
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# -------------------------------
# –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
# -------------------------------
@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º")
async def contact_seller(message: types.Message):
    await message.answer(
        f"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º:\n\n"
        f"üë§ –ê–¥–º–∏–Ω: @{(await bot.get_chat(ADMIN_ID)).username}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 777 777 77 77",
        reply_markup=back_menu()
    )

# -------------------------------
# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã
# -------------------------------
@dp.message(F.text == "üõç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã")
async def show_categories(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=products_menu())

# -------------------------------
# –•–∞–ª–∞—Ç—ã
# -------------------------------
# -------------------------------
# –•–∞–ª–∞—Ç—ã
# -------------------------------
@dp.message(F.text == "–•–∞–ª–∞—Ç—ã")
async def show_halats(message: types.Message):
    text = "üß• –ù–∞—à–∏ —Ö–∞–ª–∞—Ç—ã:\n\n"
    for p in products["–•–∞–ª–∞—Ç—ã"]:
        text += f"‚Ä¢ {p['name']} ‚Äî {p['price']}\n"
    await message.answer(
        text,
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ —Ö–∞–ª–∞—Ç–æ–≤")],
                [KeyboardButton(text="üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ö–∞–ª–∞—Ç")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ —Ö–∞–ª–∞—Ç–æ–≤")
async def show_halats_photos(message: types.Message):
    for p in products["–•–∞–ª–∞—Ç—ã"]:
        photo_file = FSInputFile(p["photo"])
        await message.answer_photo(photo_file, caption=f"{p['name']} ‚Äî {p['price']}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª:", reply_markup=products_menu())

# üëâ –ù–æ–≤–æ–µ: –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–∞–ª–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
@dp.message(F.text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ö–∞–ª–∞—Ç")
async def choose_halats_to_order(message: types.Message):
    kb = [[KeyboardButton(text=f"üõí –ó–∞–∫–∞–∑–∞—Ç—å {p['name']}")] for p in products["–•–∞–ª–∞—Ç—ã"]]
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ö–∞–ª–∞—Ç:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

# -------------------------------
# –ü–æ–ª–æ—Ç–µ–Ω—Ü–µ
# -------------------------------
@dp.message(F.text == "–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ –¥–ª—è —Ä—É–∫")
async def show_towel(message: types.Message):
    p = products["–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ"]
    photo_file = FSInputFile(p["photo"])
    await message.answer_photo(
        photo_file,
        caption=f"{p['name']}\n–¶–µ–Ω–∞: {p['price']}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üé® –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –ø–æ–ª–æ—Ç–µ–Ω—Ü–∞")],
                [KeyboardButton(text=f"üõí –ó–∞–∫–∞–∑–∞—Ç—å {p['name']}")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "üé® –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –ø–æ–ª–æ—Ç–µ–Ω—Ü–∞")
async def choose_towel_color(message: types.Message):
    colors = products["–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ"]["colors"]
    kb = [[KeyboardButton(text=f"üõí –ó–∞–∫–∞–∑–∞—Ç—å –ü–æ–ª–æ—Ç–µ–Ω—Ü–µ ({c})")] for c in colors]
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

# -------------------------------
# –ù–æ—Å–∫–∏
# -------------------------------
@dp.message(F.text == "–ù–æ—Å–∫–∏ –¥–µ—Ç—Å–∫–∏–µ")
async def show_socks(message: types.Message):
    p = products["–ù–æ—Å–∫–∏"]
    photo_file = FSInputFile(p["photo"])
    await message.answer_photo(
        photo_file,
        caption=f"{p['name']}\n–¶–µ–Ω–∞: {p['price']}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üé® –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –Ω–æ—Å–∫–æ–≤")],
                [KeyboardButton(text=f"üõí –ó–∞–∫–∞–∑–∞—Ç—å {p['name']}")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "üé® –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –Ω–æ—Å–∫–æ–≤")
async def choose_socks_color(message: types.Message):
    colors = products["–ù–æ—Å–∫–∏"]["colors"]
    kb = [[KeyboardButton(text=f"üõí –ó–∞–∫–∞–∑–∞—Ç—å –ù–æ—Å–∫–∏ ({c})")] for c in colors]
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

# -------------------------------
# –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞
# -------------------------------
user_orders = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç –∑–∞–∫–∞–∑—ã (user_id: —Ç–æ–≤–∞—Ä)

@dp.message(F.text.startswith("üõí –ó–∞–∫–∞–∑–∞—Ç—å"))
async def order_item(message: types.Message):
    item = message.text.replace("üõí –ó–∞–∫–∞–∑–∞—Ç—å ", "")
    user_orders[message.from_user.id] = item
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(F.text.regexp(r"^[–ê-–Ø–∞-—èA-Za-z—ë–Å\- ]+$"))
async def get_name(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_orders and not isinstance(user_orders[user_id], dict):
        user_orders[user_id] = {"item": user_orders[user_id], "name": message.text}
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...)")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

@dp.message(F.text.regexp(r"^\+?\d{10,13}$"))
async def get_phone(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_orders and isinstance(user_orders[user_id], dict):
        user_orders[user_id]["phone"] = message.text
        order = user_orders[user_id]

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        order_text = (
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üë§ –ò–º—è: {order['name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {order['item']}\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or '–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'}"
        )
        await bot.send_message(ADMIN_ID, order_text)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ üôå", reply_markup=menu_button())
        del user_orders[user_id]

# -------------------------------
# –ù–∞–∑–∞–¥ –∏ –º–µ–Ω—é
# -------------------------------
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.message(F.text == "üè† –í –º–µ–Ω—é")
async def go_menu(message: types.Message):
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu())

# -------------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------------
if __name__ == "__main__":
    dp.run_polling(bot)
